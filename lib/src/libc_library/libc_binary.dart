// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/binary_generator

part of libc.libc_library;

class LibC {
  // #define CHAR_BIT __CHAR_BIT    
  static const int CHAR_BIT = 8;    
      
  // #define CHAR_MAX ((1 << CHAR_BIT) / 2 - 1)    
  static const int CHAR_MAX = 127;    
      
  // #define CHAR_MIN __CHAR_MIN    
  static const int CHAR_MIN = -128;    
      
  // #define INT16_MAX 32767    
  static const int INT16_MAX = 32767;    
      
  // #define INT32_MAX 2147483647    
  static const int INT32_MAX = 2147483647;    
      
  // #define INT64_MAX 9223372036854775807    
  static const int INT64_MAX = 9223372036854775807;    
      
  // #define INT8_MAX 127    
  static const int INT8_MAX = 127;    
      
  // #define INT8_MIN -128    
  static const int INT8_MIN = -128;    
      
  // #define INTPTR_MAX ((1 << __PTR_BIT) / 2 - 1)    
  static const int INTPTR_MAX = 2147483647;    
      
  // #define INTPTR_MIN (-(1 << __PTR_BIT) / 2)    
  static const int INTPTR_MIN = -2147483648;    
      
  // #define INT_FAST16_MAX INT16_MAX    
  static const int INT_FAST16_MAX = 32767;    
      
  // #define INT_FAST32_MAX INT32_MAX    
  static const int INT_FAST32_MAX = 2147483647;    
      
  // #define INT_FAST64_MAX INT64_MAX    
  static const int INT_FAST64_MAX = 9223372036854775807;    
      
  // #define INT_FAST8_MAX INT8_MAX    
  static const int INT_FAST8_MAX = 127;    
      
  // #define INT_FAST8_MIN INT8_MIN    
  static const int INT_FAST8_MIN = -128;    
      
  // #define INT_LEAST16_MAX INT16_MAX    
  static const int INT_LEAST16_MAX = 32767;    
      
  // #define INT_LEAST32_MAX INT32_MAX    
  static const int INT_LEAST32_MAX = 2147483647;    
      
  // #define INT_LEAST64_MAX INT64_MAX    
  static const int INT_LEAST64_MAX = 9223372036854775807;    
      
  // #define INT_LEAST8_MAX INT8_MAX    
  static const int INT_LEAST8_MAX = 127;    
      
  // #define INT_LEAST8_MIN INT8_MIN    
  static const int INT_LEAST8_MIN = -128;    
      
  // #define INT_MAX ((1 << __INT_BIT) / 2 - 1)    
  static const int INT_MAX = 2147483647;    
      
  // #define INT_MIN (-(1 << __INT_BIT) / 2)    
  static const int INT_MIN = -2147483648;    
      
  // #define LLONG_MAX ((1 << __LLONG_BIT) / 2 - 1)    
  static const int LLONG_MAX = 9223372036854775807;    
      
  // #define LLONG_MIN (-(1 << __LLONG_BIT) / 2)    
  static const int LLONG_MIN = -9223372036854775808;    
      
  // #define LONG_MAX ((1 << __LONG_BIT) / 2 - 1)    
  static const int LONG_MAX = 2147483647;    
      
  // #define LONG_MIN (-(1 << __LONG_BIT) / 2)    
  static const int LONG_MIN = -2147483648;    
      
  // #define MB_LEN_MAX 6    
  static const int MB_LEN_MAX = 6;    
      
  // #define PTRDIFF_MAX INTPTR_MAX    
  static const int PTRDIFF_MAX = 2147483647;    
      
  // #define PTRDIFF_MIN INTPTR_MIN     
  static const int PTRDIFF_MIN = -2147483648;    
      
  // #define SCHAR_MAX ((1 << __CHAR_BIT) / 2 - 1)    
  static const int SCHAR_MAX = 127;    
      
  // #define SCHAR_MIN (-(1 << __CHAR_BIT) / 2)    
  static const int SCHAR_MIN = -128;    
      
  // #define SHRT_MAX ((1 << __SHORT_BIT) / 2 - 1)    
  static const int SHRT_MAX = 32767;    
      
  // #define SHRT_MIN (-(1 << __SHORT_BIT) / 2)    
  static const int SHRT_MIN = -32768;    
      
  // #define SIZE_MAX UINTPTR_MAX    
  static const int SIZE_MAX = 4294967295;    
      
  // #define UCHAR_MAX ((1 << __CHAR_BIT) - 1)    
  static const int UCHAR_MAX = 255;    
      
  // #define UINT16_MAX 65535    
  static const int UINT16_MAX = 65535;    
      
  // #define UINT32_MAX 4294967295    
  static const int UINT32_MAX = 4294967295;    
      
  // #define UINT64_MAX 18446744073709551615    
  static const int UINT64_MAX = 18446744073709551615;    
      
  // #define UINT8_MAX 255    
  static const int UINT8_MAX = 255;    
      
  // #define UINTPTR_MAX ((1 << __PTR_BIT) - 1)    
  static const int UINTPTR_MAX = 4294967295;    
      
  // #define UINT_FAST16_MAX UINT16_MAX    
  static const int UINT_FAST16_MAX = 65535;    
      
  // #define UINT_FAST32_MAX UINT32_MAX    
  static const int UINT_FAST32_MAX = 4294967295;    
      
  // #define UINT_FAST64_MAX UINT64_MAX    
  static const int UINT_FAST64_MAX = 18446744073709551615;    
      
  // #define UINT_FAST8_MAX UINT8_MAX    
  static const int UINT_FAST8_MAX = 255;    
      
  // #define UINT_LEAST16_MAX UINT16_MAX    
  static const int UINT_LEAST16_MAX = 65535;    
      
  // #define UINT_LEAST32_MAX UINT32_MAX    
  static const int UINT_LEAST32_MAX = 4294967295;    
      
  // #define UINT_LEAST64_MAX UINT64_MAX    
  static const int UINT_LEAST64_MAX = 18446744073709551615;    
      
  // #define UINT_LEAST8_MAX UINT8_MAX    
  static const int UINT_LEAST8_MAX = 255;    
      
  // #define UINT_MAX ((1 << __INT_BIT) - 1)    
  static const int UINT_MAX = 4294967295;    
      
  // #define ULONG_MAX ((1 << __LONG_BIT) - 1)    
  static const int ULONG_MAX = 4294967295;    
      
  // #define USHRT_MAX ((1 << __SHORT_BIT) - 1)    
  static const int USHRT_MAX = 65535;    
      
  // #define WCHAR_MAX UINT16_MAX    
  static const int WCHAR_MAX = 65535;    
      
  // #define WCHAR_MIN 0    
  static const int WCHAR_MIN = 0;    
      
  // #define WINT_MAX UINT16_MAX    
  static const int WINT_MAX = 65535;    
      
  // #define WINT_MIN 0    
  static const int WINT_MIN = 0;    
      
  DynamicLibrary _library;
  
  /**
   *
   */
  LibC(DynamicLibrary library) { 
    var headers = <String>["assert.h", "complex.h", "ctype.h", "errno.h", "fenv.h", "float.h", "inttypes.h", "iso646.h", "limits.h", "locale.h", "math.h", "setjmp.h", "signal.h", "stdarg.h", "stdbool.h", "stddef.h", "stdint.h", "stdlib.h", "stdio.h", "string.h", "tgmath.h", "time.h", "wchar.h", "wctype.h"];
    var types = library.types;
    var helper = new BinaryTypeHelper(types); 
    for (var header in headers) {
      helper.declare(header);    
    }
  
    library.link(headers);
    _library = library;
  }
  
  /**
   * void clearerr(FILE *)
   */
  void clearerr(stream) {
    return _library.invoke("clearerr", [stream]);
  }
  
  /**
   * int fclose(FILE *)
   */
  int fclose(stream) {
    return _library.invoke("fclose", [stream]);
  }
  
  /**
   * FILE * fdopen(int, char *)
   */
  BinaryData fdopen(int filedes, opentype) {
    return _library.invoke("fdopen", [filedes, opentype]);
  }
  
  /**
   * int feof(FILE *)
   */
  int feof(stream) {
    return _library.invoke("feof", [stream]);
  }
  
  /**
   * int ferror(FILE *)
   */
  int ferror(stream) {
    return _library.invoke("ferror", [stream]);
  }
  
  /**
   * int fflush(FILE *)
   */
  int fflush(stream) {
    return _library.invoke("fflush", [stream]);
  }
  
  /**
   * int fgetc(FILE *)
   */
  int fgetc(stream) {
    return _library.invoke("fgetc", [stream]);
  }
  
  /**
   * int fgetpos(FILE *, fpos_t *)
   */
  int fgetpos(stream, position) {
    return _library.invoke("fgetpos", [stream, position]);
  }
  
  /**
   * char * fgets(char *, int, FILE *)
   */
  BinaryData fgets(s, int count, stream) {
    return _library.invoke("fgets", [s, count, stream]);
  }
  
  /**
   * FILE * fopen(char *, char *)
   */
  BinaryData fopen(filename, opentype) {
    return _library.invoke("fopen", [filename, opentype]);
  }
  
  /**
   * int fprintf(FILE *, char *, ...)
   */
  int fprintf(stream, template, [List params]) {
    var arguments = [stream, template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("fprintf", arguments);
  }
  
  /**
   * int fputc(int, FILE *)
   */
  int fputc(int c, stream) {
    return _library.invoke("fputc", [c, stream]);
  }
  
  /**
   * int fputs(char *, FILE *)
   */
  int fputs(s, stream) {
    return _library.invoke("fputs", [s, stream]);
  }
  
  /**
   * size_t fread(void *, size_t, size_t, FILE *)
   */
  int fread(data, int size, int count, stream) {
    return _library.invoke("fread", [data, size, count, stream]);
  }
  
  /**
   * FILE * freopen(char *, char *, FILE *)
   */
  BinaryData freopen(filename, opentype, stream) {
    return _library.invoke("freopen", [filename, opentype, stream]);
  }
  
  /**
   * int fscanf(FILE *, char *, ...)
   */
  int fscanf(stream, template, [List params]) {
    var arguments = [stream, template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("fscanf", arguments);
  }
  
  /**
   * int fseek(FILE *, long int, int)
   */
  int fseek(stream, int offset, int whence) {
    return _library.invoke("fseek", [stream, offset, whence]);
  }
  
  /**
   * int fsetpos(FILE *, fpos_t *)
   */
  int fsetpos(stream, position) {
    return _library.invoke("fsetpos", [stream, position]);
  }
  
  /**
   * long int ftell(FILE *)
   */
  int ftell(stream) {
    return _library.invoke("ftell", [stream]);
  }
  
  /**
   * size_t fwrite(void *, size_t, size_t, FILE *)
   */
  int fwrite(data, int size, int count, stream) {
    return _library.invoke("fwrite", [data, size, count, stream]);
  }
  
  /**
   * int getc(FILE *)
   */
  int getc(stream) {
    return _library.invoke("getc", [stream]);
  }
  
  /**
   * int getchar()
   */
  int getchar() {
    return _library.invoke("getchar", []);
  }
  
  /**
   * char * gets(char *)
   */
  BinaryData gets(s) {
    return _library.invoke("gets", [s]);
  }
  
  /**
   * void perror(char *)
   */
  void perror(message) {
    return _library.invoke("perror", [message]);
  }
  
  /**
   * int printf(char *, ...)
   */
  int printf(template, [List params]) {
    var arguments = [template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("printf", arguments);
  }
  
  /**
   * int putc(int, FILE *)
   */
  int putc(int c, stream) {
    return _library.invoke("putc", [c, stream]);
  }
  
  /**
   * int putchar(int)
   */
  int putchar(int c) {
    return _library.invoke("putchar", [c]);
  }
  
  /**
   * int puts(char *)
   */
  int puts(s) {
    return _library.invoke("puts", [s]);
  }
  
  /**
   * int remove(char *)
   */
  int remove(filename) {
    return _library.invoke("remove", [filename]);
  }
  
  /**
   * int rename(char *, char *)
   */
  int rename(oldname, newname) {
    return _library.invoke("rename", [oldname, newname]);
  }
  
  /**
   * void rewind(FILE *)
   */
  void rewind(stream) {
    return _library.invoke("rewind", [stream]);
  }
  
  /**
   * int scanf(char *, ...)
   */
  int scanf(template, [List params]) {
    var arguments = [template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("scanf", arguments);
  }
  
  /**
   * void setbuf(FILE *, char *)
   */
  void setbuf(stream, buf) {
    return _library.invoke("setbuf", [stream, buf]);
  }
  
  /**
   * int setvbuf(FILE *, char *, int, size_t)
   */
  int setvbuf(stream, buf, int mode, int size) {
    return _library.invoke("setvbuf", [stream, buf, mode, size]);
  }
  
  /**
   * int snprintf(char *, size_t, char *, ...)
   */
  int snprintf(s, int size, template, [List params]) {
    var arguments = [s, size, template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("snprintf", arguments);
  }
  
  /**
   * int sprintf(char *, char *, ...)
   */
  int sprintf(s, template, [List params]) {
    var arguments = [s, template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("sprintf", arguments);
  }
  
  /**
   * int sscanf(char *, char *, ...)
   */
  int sscanf(s, template, [List params]) {
    var arguments = [s, template];
    if (params != null) {
      arguments.addAll(params);
    }
    
    return _library.invoke("sscanf", arguments);
  }
  
  /**
   * FILE * tmpfile()
   */
  BinaryData tmpfile() {
    return _library.invoke("tmpfile", []);
  }
  
  /**
   * char * tmpnam(char *)
   */
  BinaryData tmpnam(result) {
    return _library.invoke("tmpnam", [result]);
  }
  
  /**
   * int ungetc(int, FILE *)
   */
  int ungetc(int c, stream) {
    return _library.invoke("ungetc", [c, stream]);
  }
  
  /**
   * int vfprintf(FILE *, char *, va_list)
   */
  int vfprintf(stream, template, ap) {
    return _library.invoke("vfprintf", [stream, template, ap]);
  }
  
  /**
   * int vfscanf(FILE *, char *, va_list)
   */
  int vfscanf(stream, template, ap) {
    return _library.invoke("vfscanf", [stream, template, ap]);
  }
  
  /**
   * int vprintf(char *, va_list)
   */
  int vprintf(template, ap) {
    return _library.invoke("vprintf", [template, ap]);
  }
  
  /**
   * int vscanf(char *, va_list)
   */
  int vscanf(template, ap) {
    return _library.invoke("vscanf", [template, ap]);
  }
  
  /**
   * int vsprintf(char *, char *, va_list)
   */
  int vsprintf(s, template, ap) {
    return _library.invoke("vsprintf", [s, template, ap]);
  }
  
  /**
   * int vsscanf(char *, char *, va_list)
   */
  int vsscanf(s, template, ap) {
    return _library.invoke("vsscanf", [s, template, ap]);
  }
  
}

